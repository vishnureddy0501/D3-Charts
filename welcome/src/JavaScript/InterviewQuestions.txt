what is HTML(Hyper Text Markup language)?
-------------
used for creating Web pages

(or)

Used to display static content on webpage.

memory allocation:
--------------------
var a = "abc";
if you modify above variable then new memory gets created for it. // this is applicable for all primitive types.

eg: 
var a = {name: "vish"};
a.name = "vardhan";
if you modify above object then new memory won't gets created. the value gets updated in the same memory location.
 
 what is javascript?
 -------------------
 Browser understands HTML, CSS, JavaScript. Every browser contains javascript engine in it.
 JavaScript -> JavaScript is a programming language that is used to make webpages dynamic and interactive.

 what is javascript engine?
 -----------------------------
 Every browser contains javascript engine. it is responsible for executing javascript code.
 javascript engine is a program that execute javascript code in the browser.
 
 what is DOM? // nothing but accessing the HTML elements, updating and applying styles to elements from javascript code itself.
 ------------
 DOM (document Object model) is a tree like structure that allows javascript to dynamically access, manipulate the content and styles of webpage.


 synchronous vs asynchronous:
 ----------------------------
 synchronous -> sequential execution
 asynchronous -> Non-sequential execution

 asynchronous operations: asynchronous operations are the operations that do not block the execution of code.
 eg: settimeout

 what are promises in javascript
 --------------------------------
 promises is a way in javascript to handle asynchronous operations.
 A promise represents a value that is not available now, but it is available at some point of time in future.
 syntax: 
 const newpromise = new Promise((resolve, reject) => {
    // perform asynchronous operation
    // if successful call resolve(value)
    // if failed call reject(error)
 })
 
 example usage of promise: 
 ------------------------
 const promise = new Promise((resolve, reject) => {
    setTimeout(()=>{
        const value = Math.floor(Math.random()*10);
        console.log(value);
        if(value < 5) {
            resolve({success: true, value: value}); // one argument you can pass anything you want
        } else {
            reject({success: false, value: value}); // one argument you can pass anything you want
        }
    }, 1000);
 })
 promise.then((res)=>{
    console.log(res);
 }).catch((err)=>{
    console.error(err);
 })

scope of variable:
--------------------
var -> function scope. (hoisting allowed)
let -> block scope. (hoisting not allowed)
const -> block scope. (hoisting not allowed)

eg: 
const add = () => {
    if(true) {
        var name = "vish"; // even through var is declared inside block. because of hoisting it is available across whole function.
    } 
    console.log(name);
}
 iterating in a object javascript: (for in loop)
 ----------------------------------
eg:1 const data = {name: "vishnu", age: 20};
 for(let key in data) {
    console.log(data[key]);
 }
 
 const person = {name: "vihsnu", age: 20};
Object.keys(person).forEach((item)=>{
    console.log(item, person[item]);
})

Object.values(person).forEach((item)=>{
    console.log(item);
})


Hoisting in javascript:
-------------------------
variables and functions are moved to top of their respective scopes during compilation time.
eg: 
---
add(10, 20);
const add = (a, b) => a+b;
// this code will not give error because the function moved to top of it's scope during compilation time.
it will internally converted like this

const add = (a, b) => a+b;
add(10, 20);

eg2: only "var" declaration allows Hoisting. other declarations like let, const don't allow hoisting. 
-----
console.log(x); // output is 10
x=20;
var x = 10;     // this also won't give error. because variable moved to top of it's scope during compilation time.

after Hoisting:
var x=10;  // declaration hoistedto top
conosle.log(x);
x=20;

callback function:
-------------------
A  callback function is a function that is passed as an argument to another
function and is intended to be executed after some operation has been completed

const add = (x, y) => return x+y;
const multiply = (x,y) => return x*y;
const display = (x, y, operation) => {
    const result = operation(x,y);
    console.log(result);
    return result;
}
display(10, 20, add);
display(10, 20, multiply);

applications of callback function:
----------------------------------
1. promises, fetch, settimeout, setinterval

eg: 
setTimeout(()=> {
    // this is a call back function because we passed whole function as argument to function settimeout
}, 1000);

event handling in javascript:
-----------------------------
<button id='mybutton'></button>
document.getElementById.addEventListener('click', ()=>{
    // this is a call back function because we passed whole function as argument
});

eg2: 

<button id='mybutton'></button>
const handlEvent = (event) => {
    // event parameter passed by the event handler by default to the event handling function.
    console.log(event);
}
document.getElementById.addEventListener('click', handlEvent);

 Explain the difference between == and === in JavaScript.
 --------------------------------------------------------
    == is the loose equality operator that performs type conversion before comparing.
    === is the strict equality operator that does not perform type coercion, meaning the values and types must be the same.
Data Types:
-----------
primitive: String, Number, null, undefined, boolean
eg:
    let val; // undefined assigned to it by default;
    let myVal = null; // null is assigned. null means nothing
non-primitive: Object, array, function, Date, Regular expression

undefined vs null:
-------------------
undefined: Represents variables that have been declared but not yet assigned a value.
             It's automatically assigned by JavaScript in certain scenarios.

            (or)
            undefined can be used when we dont have value right now. but you will get it after some logic or operation.
null:  intentional assignment to a variable. (if you don't want to store anything in variable then you can assign null).
        (or)
        Represents an intentional absence of value and is explicitly assigned by developers.

what is the type of variable when it is declared without var, let, const?
------------------------------------------------------------------------
eg: name = "vishnu" // now the default type if "var" 

is javascript single threaded?
-------------------------------
JavaScript is a single threaded synchronous language.
JavaScript handles asynchronous operations using several mechanisms despite being single-threaded. Here's how it works:
1. Event Loop

The event loop is a fundamental part of JavaScript's concurrency model. It manages the execution of code, handling events, and processing asynchronous tasks. Here's a simplified view of how it works:

    Call Stack: JavaScript has a call stack where function calls are pushed and popped as they execute. If a function is called, it's added to the stack; when it returns, it's removed from the stack.

    Task Queue (or Callback Queue): When asynchronous tasks (like I/O operations, timers, or network requests) are completed, their associated callback functions are placed in the task queue.

    Event Loop: The event loop continuously checks the call stack and the task queue. If the call stack is empty, the event loop takes the first task from the task queue and pushes it onto the call stack for execution.

This process ensures that JavaScript can handle tasks asynchronously by deferring their execution until the call stack is clear.
2. Web APIs

    setTimeout/setInterval: These functions are provided by Web APIs to schedule code execution after a delay or at intervals.
    fetch/AJAX: These functions handle network requests asynchronously. When a request is made, the JavaScript engine continues running other code, and the response is handled once it arrives.

3. Promises

Promises provide a way to handle asynchronous operations.

    Pending: The initial state of a promise.
    Fulfilled: The promise is resolved successfully.
    Rejected: The promise has failed.

A promise represents the result of an asynchronous operation and provides .then() and .catch() methods to handle the result or error.
4. Async/Await

async functions and await expressions provide a more synchronous-looking syntax for working with asynchronous code:

    async: Declares an asynchronous function that returns a promise.
    await: Pauses execution inside an async function until the promise resolves or rejects.

Summary

    Single-Threaded Execution: JavaScript executes code in a single thread, but it can manage asynchronous tasks through the event loop, Web APIs, promises, and async/await.
    Event Loop: Manages the execution of code by handling the call stack and task queue.
    Web APIs: Offload time-consuming tasks and notify JavaScript when they are complete.
    Promises and async/await: Provide cleaner ways to work with asynchronous operations.

By leveraging these mechanisms, JavaScript efficiently handles asynchronous tasks while keeping the main thread free for executing other code.

Event Loop:
-------------
1. Event loop is responsible for asynchronous programming(means settimeout, setinterval, promises, apicalls) in javascript.
2. Event loop is a program that runs until page closes or application terminated.


event handling in javascript:
-----------------------------
<button id='mybutton'></button>
document.getElementById.addEventListener('click', ()=>{
    // this is a call back function because we passed whole function as argument
});

check if 2 strings are annagrams?
-----------------------------------
const str1 = "abcd";
const str2 = "dcba";
const updatedStr1 = str1.split("").sort().join(""); // split to array of characters and sort the array and then join it.
const updatedStr2 = str2.split("").sort().join("");
console.log(updatedStr1 === updatedStr2);